// server/controllers/categoryController.js
const Category = require('../models/Category');
const multer = require('multer');
const path = require('path');

// Set up multer middleware to handle file uploads
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, path.join(__dirname,'..','client','public', 'category_icons')); // Set the destination folder for uploaded images
  },
  filename: function (req, file, cb) {
    cb(null, file.originalname); // Set the filename for the uploaded image
  }
});


exports.getCategories = async (req, res) => {
  try {
    const categories = await Category.find();
    res.json(categories);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server Error' });
  }
};

exports.createCategory = async (req, res) => {
  try {
    const { name, description, iconUrl } = req.body;

    const categoryData = {
      name,
      description,
      iconUrl,
    };

    const category = new Category(categoryData);
    await category.save();

    res.status(201).json(category);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server Error' });
  }
};

exports.updateCategory = async (req, res) => {
  try {
    const { id } = req.params;
    // const { name, description, iconUrl } = req.body;

    // const updateObject = {};
    // if (name) updateObject.name = name;
    // if (description) updateObject.description = description;
    // if (iconUrl) updateObject.iconUrl = iconUrl;

    const updatedCategory = await Category.findByIdAndUpdate(id, req.body, { new: true });

    if (!updatedCategory) {
      return res.status(404).json({ message: 'Category not found' });
    }

    res.json(updatedCategory);
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server Error' });
  }
};


exports.deleteCategory = async (req, res) => {
  try {
    const { id } = req.params;
    const category = await Category.findByIdAndDelete(id);
    if (!category) {
      return res.status(404).json({ message: 'Category not found' });
    }
    res.json({ message: 'Category deleted successfully' });
  } catch (error) {
    console.error(error);
    res.status(500).json({ message: 'Server Error' });
  }
};
// Handle icon upload
exports.uploadIcon = async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ message: 'No icon uploaded' });
    }

    // Construct the icon URL
    const fileName = req.file.originalname;
    const iconUrl = '/category_icons/' + fileName;
    
    // Send back the icon URL
    res.status(201).json({ iconUrl });
  } catch (error) {
    console.error('Error uploading icon:', error);
    res.status(500).json({ message: 'Server Error' });
  }
};

exports.upload = multer({ storage: storage }).single('icon');
